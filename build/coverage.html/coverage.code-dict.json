{"/home/travis/build/npmtest/node-npmtest-asterisk-manager/test.js":"/* istanbul instrument in package npmtest_asterisk_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-asterisk-manager/lib.npmtest_asterisk_manager.js":"/* istanbul instrument in package npmtest_asterisk_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_asterisk_manager = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_asterisk_manager = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-asterisk-manager/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-asterisk-manager && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_asterisk_manager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_asterisk_manager\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_asterisk_manager.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_asterisk_manager.rollup.js'] =\n            local.assetsDict['/assets.npmtest_asterisk_manager.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_asterisk_manager.__dirname +\n                    '/lib.npmtest_asterisk_manager.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-asterisk-manager/node_modules/asterisk-manager/index.js":"/*\n * NodeJS Asterisk Manager API\n * (Based on https://github.com/mscdex/node-asterisk.git)\n * But radically altered thereafter so as to constitute a new work.\n *\n * © See LICENSE file\n *\n */\n\n module.exports = require('./lib/ami.js');\n","/home/travis/build/npmtest/node-npmtest-asterisk-manager/node_modules/asterisk-manager/lib/ami.js":"/*\n * NodeJS Asterisk Manager API\n * (Based on https://github.com/mscdex/node-asterisk.git)\n * But radically altered thereafter so as to constitute a new work.\n *\n * © See LICENSE file\n *\n */\n/* jshint node:true, newcap:false */\n'use strict';\nvar debug = false;\n\nvar EventEmitter = require('events').EventEmitter\n  , Net = require('net')\n  , Utils = require('./utils');\n\nvar Manager = function Manager(port, host, username, password, events) {\n  \n  var obj = {}\n    , context = {}\n    , properties = ['on', 'once', 'addListener', 'removeListener', 'removeAllListeners',\n                    'listeners', 'setMaxListeners', 'emit'];\n\n  context.emitter = new EventEmitter();\n  context.held = [];\n\n  properties.map(function(property){\n    Object.defineProperty(obj, property, {\n      value: context.emitter[property].bind(context.emitter)\n    });\n  })\n\n  obj.options = {\n    port: port,\n    host: host || \"\",\n    username: username || \"\",\n    password: password || \"\",\n    events: events || false\n  };\n\n  obj.connect = ManagerConnect.bind(obj, context);\n  obj.keepConnected = ManagerKeepConnected.bind(obj, context);\n  obj.login = ManagerLogin.bind(obj, context);\n  obj.action = ManagerAction.bind(obj, context);\n  obj.disconnect = ManagerDisconnect.bind(obj, context);\n  obj.isConnected = ManagerIsConnected.bind(obj, context);\n  obj.connected = obj.isConnected;\n\n  obj.on('rawevent', ManagerEvent.bind(obj, context));\n  obj.on('error', function (err) {});\n  \n  if (port){\n    obj.connect(\n      obj.options.port, \n      obj.options.host, \n      obj.options.username ? obj.login.bind(obj, obj.options.username, password, events) : undefined\n    );\n  } \n\n  return obj;\n};\n\nfunction ManagerConnect(context, port, host, callback) {\n  callback = Utils.defaultCallback(callback);\n\n  context.connection = (context.connection && (context.connection.readyState != 'closed')) ? context.connection : undefined;\n\n  if (context.connection)\n    return callback.call(this, null);\n\n  context.authenticated = false;\n  context.connection = Net.createConnection(port, host);\n  context.connection.setKeepAlive(true);\n  context.connection.setNoDelay(true);\n  context.connection.setEncoding('utf-8');\n  context.connection.once('connect', callback.bind(this, null));\n  context.connection.on('connect', this.emit.bind(this, 'connect'));\n  context.connection.on('close', this.emit.bind(this, 'close'));\n  context.connection.on('end', this.emit.bind(this, 'end'));\n  context.connection.on('data', ManagerReader.bind(this, context));\n  context.connection.on('error', ManagerConnectionError.bind(this, context));\n\n}\n\nfunction ManagerConnectionError(context, error) {\n  this.emit('error', error);\n  if (debug) {\n    error = String(error.stack).split(/\\r?\\n/);\n    var msg = error.shift();\n    error = error.map(function(line) {\n      return ' ↳ ' + line.replace(/^\\s*at\\s+/, '');\n    });\n    error.unshift(msg);\n    error.forEach(function(line) {\n      process.stderr.write(line + '\\n');\n    });\n  }\n}\n\nfunction ManagerReader(context, data) {\n\n  context.lines = context.lines || [];\n  context.leftOver = context.leftOver || '';\n  context.leftOver += String(data);\n  context.lines = context.lines.concat(context.leftOver.split(/\\r?\\n/));\n  context.leftOver = context.lines.pop();\n\n  var lines = []\n    , follow = 0\n    , item = {};\n  while (context.lines.length) {\n    var line = context.lines.shift();\n    if (!lines.length && (line.substr(0, 21) === 'Asterisk Call Manager')) {\n      // Ignore Greeting\n    } else if (!lines.length && (line.substr(0, 9).toLowerCase() === 'response:') && (line.toLowerCase().indexOf('follow') > -1)) {\n      follow = 1;\n      lines.push(line);\n    } else if (follow && (line === '--END COMMAND--')) {\n      follow = 2;\n      lines.push(line);\n    } else if ((follow > 1) && !line.length) {\n      follow = 0;\n      lines.pop();\n      item = {\n        'response': 'follows',\n        'content': lines.join('\\n')\n      };\n\n      var matches = item.content.match(/actionid: ([^\\r\\n]+)/i);\n      item.actionid = matches ? matches[1] : item.actionid;\n\n      lines = [];\n      this.emit('rawevent', item);\n    } else if (!follow && !line.length) {\n      // Have a Complete Item\n      lines = lines.filter(Utils.stringHasLength);\n      item = {};\n      while (lines.length) {\n        line = lines.shift();\n        line = line.split(':');\n        var key = Utils.removeSpaces(line.shift()).toLowerCase();\n        line = Utils.removeSpaces(line.join(':'));\n        if (key === 'variable') {\n          // Handle special case of one or more variables attached to an event and\n          // create a variables subobject in the event object\n          if (typeof(item[key]) !== 'object')\n            item[key] = {};\n          line = line.split('=');\n          var subkey = line.shift().toLowerCase();\n          item[key][subkey] = line.join('=');\n        } else {\n          // Generic case of multiple copies of a key in an event.\n          // Create an array of values.\n          if (key in item) {\n            if (Array.isArray(item[key]))\n              item[key].push(line);\n            else\n              item[key] = [item[key]];\n          } else\n            item[key] = line;\n        }\n      }\n      context.follow = false;\n      lines = [];\n      this.emit('rawevent', item);\n    } else {\n      lines.push(line);\n    }\n  }\n  context.lines = lines;\n\n\n}\n\nfunction ManagerEvent(context, event) {\n  var emits = [];\n  if (event.response && event.actionid) {\n    // This is the response to an Action\n    emits.push(this.emit.bind(this, event.actionid, (event.response.toLowerCase() == 'error') ? event : undefined, event));\n    emits.push(this.emit.bind(this, 'response', event));\n  } else if (event.response && event.content) {\n    // This is a follows response\n    emits.push(this.emit.bind(this, context.lastid, undefined, event));\n    emits.push(this.emit.bind(this, 'response', event));\n  }\n  \n  if (event.event) {\n    // This is a Real-Event\n    emits.push(this.emit.bind(this, 'managerevent', event));\n    emits.push(this.emit.bind(this, event.event.toLowerCase(), event));\n    if (('userevent' === event.event.toLowerCase()) && event.userevent)\n      emits.push(this.emit.bind(this, 'userevent-' + event.userevent.toLowerCase(), event));\n\n  } else {\n    // Ooops I dont know what this is\n    emits.push(this.emit.bind(this, 'asterisk', event));\n  }\n  emits.forEach(process.nextTick.bind(process));\n}\n\nfunction ManagerLogin(context, callback) {\n  callback = Utils.defaultCallback(callback);\n  var options = this.options;\n\n  this.action({\n    'action': 'login',\n    'username': options.username,\n    'secret': options.password,\n    'event': options.events ? 'on' : 'off'\n  }, (function(err) {\n    if (err) \n      return callback(err);\n\n    process.nextTick(callback.bind(this));\n    context.authenticated = true;\n    \n    var held = context.held;\n    context.held = [];\n    held.forEach((function(held) {\n      this.action(held.action, held.callback);\n    }).bind(this));\n\n  }).bind(this));\n\n  return;\n}\n\nfunction ManagerKeepConnected(context) {\n  if (this.reconnect) return;\n  if (this.isConnected() === false) {\n\n    this.reconnect = this.connect.bind(\n      this, this.options.port, \n      this.options.host, \n      this.login.bind(this)\n    );\n\n    this.on('close', this.reconnect);\n  }\n}\n\nfunction MakeManagerAction(req, id) {\n  var msg = [];\n  msg.push('ActionID: ' + id);\n  msg = msg.concat(Object.keys(req).map(function(key) {\n\n    var nkey = Utils.removeSpaces(key).toLowerCase();\n    if (!nkey.length || ('actionid' == nkey))\n      return;\n\n    var nval = req[key];\n    nkey = nkey.substr(0, 1).toUpperCase() + nkey.substr(1);\n    switch (typeof nval) {\n      case 'undefined':\n        return;\n      case 'object':\n        if (!nval) return;\n        if (nval instanceof Array) {\n          nval = nval.map(function(e) {\n            return String(e);\n          }).join(',');\n        } else if (nval instanceof RegExp === false) {\n          nval = Object.keys(nval).map(function(name) {\n            return [name, nval[name]].join('=');\n          }).join(',');\n        }\n        break;\n      default:\n        nval = String(nval);\n        break;\n    }\n    return [nkey, nval].join(': ');\n  }).filter(function(line) {\n    return line ? true : false;\n  }));\n  msg.sort();\n  return msg.join('\\r\\n') + '\\r\\n\\r\\n';\n}\n\nfunction ManagerAction(context, action, callback) {\n  action = action || {};\n  callback = Utils.defaultCallback(callback);\n\n  var id = action.actionid || String((new Date()).getTime());\n\n  while (this.listeners(id).length)\n    id += String(Math.floor(Math.random() * 9));\n\n  if (action.actionid)\n    delete action.actionid;\n\n  if (!context.authenticated && (action.action !== 'login')) {\n    context.held = context.held || [];\n    action.actionid = id;\n    context.held.push({\n      action: action,\n      callback: callback\n    });\n    return id;\n  }\n\n  try {\n  \n    if (!context.connection) {\n      throw new Error('There is no connection yet');\n    }\n\n    context.connection.write(MakeManagerAction(action, id), 'utf-8');\n  } catch (e) {\n\n    console.log('ERROR: ', e);\n\n    context.held = context.held || [];\n    action.actionid = id;\n    context.held.push({\n      action: action,\n      callback: callback\n    });\n\n    return id;\n  }\n\n  this.on(id, callback);\n\n  setTimeout(function(_, id, callback){\n    _.removeListener(id, callback);\n  }, 60000, this, id, callback);\n\n  return context.lastid = id;\n}\n\n\nfunction ManagerDisconnect(context, callback) {\n  \n  if (context.reconnect)\n    this.removeListener('on', context.reconnect);\n\n  if (context.connection && context.connection.readyState === 'open')\n    context.connection.end();\n\n  delete context.connection;\n\n  if ('function' === typeof callback) \n    setImmediate(callback);\n}\n\nfunction ManagerIsConnected(context) {\n  return (context.connection && context.connection.readyState === 'open');\n}\n\n// Expose `Manager`.\nmodule.exports = Manager;\n","/home/travis/build/npmtest/node-npmtest-asterisk-manager/node_modules/asterisk-manager/lib/utils.js":"module.exports.stringHasLength = function(line) {\n  return line && line.length;\n};\n\nmodule.exports.defaultCallback = function(callback) {\n  return 'function' === typeof callback ? callback : function() {};\n};\n\nmodule.exports.removeSpaces = function (string) {\n  return (string || \"\").replace(/^\\s*|\\s*$/g, '');\n};"}